--- Enumerations for various data types. All enum variants take the
--  name of the variant as a string for its value. This means that
--  anywhere an enum value is required, you can pass a string with its
--  name.
--  @usage local enums = require("core.enums")
module "enums"

--- A source of damage to be used with <code>LuaCharacter.damage_hp</code>.
--  @enum DamageSource
--  @tfield enums.DamageSource trap
--  @tfield enums.DamageSource overcasting
--  @tfield enums.DamageSource starvation
--  @tfield enums.DamageSource poisoning
--  @tfield enums.DamageSource curse
--  @tfield enums.DamageSource backpack_weight
--  @tfield enums.DamageSource fall_from_stairs
--  @tfield enums.DamageSource audience
--  @tfield enums.DamageSource burn
--  @tfield enums.DamageSource adventuring
--  @tfield enums.DamageSource unseen_hand
--  @tfield enums.DamageSource food_poisoning
--  @tfield enums.DamageSource blood_loss
--  @tfield enums.DamageSource ether_disease
--  @tfield enums.DamageSource acid
--  @tfield enums.DamageSource shatter
--  @tfield enums.DamageSource atomic_bomb
--  @tfield enums.DamageSource iron_maiden
--  @tfield enums.DamageSource guillotine
--  @tfield enums.DamageSource hanging
--  @tfield enums.DamageSource mochi
DamageSource = {}

--- A set of colors.
--  @enum Color
--  @tfield enums.Color none
--  @tfield enums.Color white
--  @tfield enums.Color green
--  @tfield enums.Color red
--  @tfield enums.Color blue
--  @tfield enums.Color orange
--  @tfield enums.Color yellow
--  @tfield enums.Color grey
--  @tfield enums.Color purple
--  @tfield enums.Color cyan
--  @tfield enums.Color light_red
--  @tfield enums.Color gold
--  @tfield enums.Color white2
--  @tfield enums.Color light_brown
--  @tfield enums.Color dark_green
--  @tfield enums.Color light_grey
--  @tfield enums.Color pale_red
--  @tfield enums.Color light_blue
--  @tfield enums.Color light_purple
--  @tfield enums.Color light_green
--  @tfield enums.Color yellow_green
--  @tfield enums.Color random_furniture
--  @tfield enums.Color random_seeded
--  @tfield enums.Color random_any
Color = {}

--- The curse state of an item.
--  @usage local item = Item.create(10, 10, "core.putitoro", 3)
--  item.curse_state = "Blessed"
--  @enum CurseState
--  @tfield enums.CurseState doomed
--  @tfield enums.CurseState cursed
--  @tfield enums.CurseState none
--  @tfield enums.CurseState blessed
CurseState = {}

--- The identify state of an item.
--  @usage local item = Item.create(10, 10, "core.putitoro", 3)
--  item.identify_state = "Completely"
--  @enum IdentifyState
--  @tfield enums.IdentifyState unidentified
--  @tfield enums.IdentifyState partly
--  @tfield enums.IdentifyState almost
--  @tfield enums.IdentifyState completely
IdentifyState = {}

--- A status effect applicable to a character.
--  @see LuaCharacter.apply_ailment
--  @enum StatusAilment
--  @tfield enums.StatusAilment blinded
--  @tfield enums.StatusAilment confused
--  @tfield enums.StatusAilment paralyzed
--  @tfield enums.StatusAilment poisoned
--  @tfield enums.StatusAilment sleep
--  @tfield enums.StatusAilment fear
--  @tfield enums.StatusAilment dimmed
--  @tfield enums.StatusAilment bleeding
--  @tfield enums.StatusAilment drunk
--  @tfield enums.StatusAilment insane
--  @tfield enums.StatusAilment sick
StatusAilment = {}

--- A type of elemental damage.
--  @enum Element
--  @tfield enums.Element fire
--  @tfield enums.Element cold
--  @tfield enums.Element lightning
--  @tfield enums.Element darkness
--  @tfield enums.Element mind
--  @tfield enums.Element poison
--  @tfield enums.Element nether
--  @tfield enums.Element sound
--  @tfield enums.Element nerve
--  @tfield enums.Element chaos
--  @tfield enums.Element magic
--  @tfield enums.Element cut
--  @tfield enums.Element ether
--  @tfield enums.Element acid
--  @tfield enums.Element vorpal
Element = {}

--- A kind of tile to be used with <code>Map.generate_tile</code>.
--  @see Map.generate_tile
--  @enum TileKind
--  @tfield enums.TileKind normal
--  @tfield enums.TileKind wall
--  @tfield enums.TileKind tunnel
--  @tfield enums.TileKind room
--  @tfield enums.TileKind fog
TileKind = {}

--- The quality of randomly generated equipment.
--  @enum Quality
--  @tfield enums.Quality none
--  @tfield enums.Quality bad
--  @tfield enums.Quality good
--  @tfield enums.Quality great
--  @tfield enums.Quality miracle
--  @tfield enums.Quality godly
--  @tfield enums.Quality special
Quality = {}

--- The type of a buff. Food buffs are lost when vomiting. Hex buffs can be
--  removed with Holy Light/Vanquish Hex, and can be resisted.
--  @enum Buff
--  @tfield enums.Buff buff
--  @tfield enums.Buff hex
--  @tfield enums.Buff food
Buff = {}

--- The type of a map.
--  @enum MapType
--  @tfield enums.MapType world_map
--  @tfield enums.MapType guild
--  @tfield enums.MapType town
--  @tfield enums.MapType field
--  @tfield enums.MapType player_owned
--  @tfield enums.MapType shelter
--  @tfield enums.MapType temporary
--  @tfield enums.MapType dungeon
--  @tfield enums.MapType dungeon_tower
--  @tfield enums.MapType dungeon_forest
--  @tfield enums.MapType dungeon_castle
MapType = {}

--- Determines how the player should be spawned in a map when entering it for the
--  first time.
--  @enum MapEntranceType
--  @tfield enums.MapEntranceType stair_up
--  @tfield enums.MapEntranceType stair_down
--  @tfield enums.MapEntranceType custom
--  @tfield enums.MapEntranceType center
--  @tfield enums.MapEntranceType random
--  @tfield enums.MapEntranceType world_map_pos
--  @tfield enums.MapEntranceType specified
--  @tfield enums.MapEntranceType south
MapEntranceType = {}

--- Indicates which map tile atlas to use for a map.
--  @enum MapTileset
--  @tfield enums.MapTileset normal
--  @tfield enums.MapTileset world_map
MapTileset = {}

--- Possible genders of a character.
--  @enum Gender
--  @tfield enums.Gender random
--  @tfield enums.Gender male
--  @tfield enums.Gender female
Gender = {}

--- Relationship of a character to the player.
--  @enum Relationship
--  @tfield enums.Relationship aggressive
--  @tfield enums.Relationship nonaggressive
--  @tfield enums.Relationship unconcerned
--  @tfield enums.Relationship neutral
--  @tfield enums.Relationship friend
Relationship = {}

--- A flag that can be set on a character. The first 32 flags (up to
--  <code>IsQuickTempered</code>) are "intrinsic" and will be reset
--  when the character is refreshed.
--  @see LuaCharacter.set_flag
--  @enum CharaFlag
--  @tfield enums.CharaFlag is_floating
--  @tfield enums.CharaFlag is_invisible
--  @tfield enums.CharaFlag can_see_invisible
--  @tfield enums.CharaFlag is_immune_to_confusion
--  @tfield enums.CharaFlag is_immune_to_blindness
--  @tfield enums.CharaFlag is_immune_to_fear
--  @tfield enums.CharaFlag is_immune_to_sleep
--  @tfield enums.CharaFlag is_immune_to_paralyzation
--  @tfield enums.CharaFlag is_immune_to_poison
--  @tfield enums.CharaFlag can_digest_rotten_food
--  @tfield enums.CharaFlag is_protected_from_thieves
--  @tfield enums.CharaFlag is_incognito
--  @tfield enums.CharaFlag drops_gold
--  @tfield enums.CharaFlag explodes
--  @tfield enums.CharaFlag is_death_master
--  @tfield enums.CharaFlag can_cast_rapid_magic
--  @tfield enums.CharaFlag has_lay_hand
--  @tfield enums.CharaFlag is_suitable_for_mount
--  @tfield enums.CharaFlag splits
--  @tfield enums.CharaFlag has_cursed_equipments
--  @tfield enums.CharaFlag is_unsuitable_for_mount
--  @tfield enums.CharaFlag is_immune_to_elemental_damage
--  @tfield enums.CharaFlag splits2
--  @tfield enums.CharaFlag is_metal
--  @tfield enums.CharaFlag cures_bleeding_quickly
--  @tfield enums.CharaFlag has_power_bash
--  @tfield enums.CharaFlag is_immune_to_mine
--  @tfield enums.CharaFlag is_quick_tempered
--  @tfield enums.CharaFlag is_livestock
--  @tfield enums.CharaFlag is_married
--  @tfield enums.CharaFlag has_made_gene
--  @tfield enums.CharaFlag is_escorted
--  @tfield enums.CharaFlag is_temporary
--  @tfield enums.CharaFlag is_silent
--  @tfield enums.CharaFlag has_been_used_stethoscope
--  @tfield enums.CharaFlag has_own_sprite
--  @tfield enums.CharaFlag is_leashed
--  @tfield enums.CharaFlag is_contracting
--  @tfield enums.CharaFlag is_quest_target
--  @tfield enums.CharaFlag is_escorted_in_sub_quest
--  @tfield enums.CharaFlag will_explode_soon
--  @tfield enums.CharaFlag is_sentenced_daeth
--  @tfield enums.CharaFlag is_lay_hand_available
--  @tfield enums.CharaFlag is_ridden
--  @tfield enums.CharaFlag is_lord_of_dungeon
--  @tfield enums.CharaFlag has_own_name
--  @tfield enums.CharaFlag is_pregnant
--  @tfield enums.CharaFlag is_not_attacked_by_enemy
--  @tfield enums.CharaFlag is_contracting_with_reaper
--  @tfield enums.CharaFlag needs_refreshing_status
--  @tfield enums.CharaFlag visited_just_now
--  @tfield enums.CharaFlag breaks_into_debris
--  @tfield enums.CharaFlag is_best_friend
--  @tfield enums.CharaFlag is_hung_on_sand_bag
--  @tfield enums.CharaFlag has_anorexia
--  @tfield enums.CharaFlag was_passed_item_by_you_just_now
--  @tfield enums.CharaFlag cures_mp_frequently
--  @tfield enums.CharaFlag has_custom_talk
--  @tfield enums.CharaFlag has_learned_words
--  @tfield enums.CharaFlag only_christmas
CharaFlag = {}

--- The types of traits available.
--  @enum TraitType
--  @tfield enums.TraitType feat
--  @tfield enums.TraitType mutation
--  @tfield enums.TraitType nature
--  @tfield enums.TraitType ether_disease
TraitType = {}

--- Location to search for characters using Chara.find.
--  @see Chara.find
--  @enum CharaFindLocation
--  @tfield enums.CharaFindLocation allies
--  @tfield enums.CharaFindLocation others
CharaFindLocation = {}

--- Location to search for items using Item.find.
--  @see Item.find
--  @enum ItemFindLocation
--  @tfield enums.ItemFindLocation player_inventory
--  @tfield enums.ItemFindLocation ground
--  @tfield enums.ItemFindLocation player_inventory_and_ground
ItemFindLocation = {}

--- Operation to use with Input.choose_ally.
--  @see Input.choose_ally
--  @enum ControlAllyOperation
--  @tfield enums.ControlAllyOperation call_back
--  @tfield enums.ControlAllyOperation sell
--  @tfield enums.ControlAllyOperation pet_arena
--  @tfield enums.ControlAllyOperation staying
--  @tfield enums.ControlAllyOperation investigate
--  @tfield enums.ControlAllyOperation gene_engineer
ControlAllyOperation = {}

--- Title type to use with World.random_title.
--  @see World.random_title
--  @enum RandomTitleType
--  @tfield enums.RandomTitleType character
--  @tfield enums.RandomTitleType weapon
--  @tfield enums.RandomTitleType party
--  @tfield enums.RandomTitleType living_weapon
RandomTitleType = {}

--- Match type to use with Wish.match.
--  @see Wish.match
--  @enum WishMatchType
--  @tfield enums.WishMatchType prefix
--  @tfield enums.WishMatchType suffix
--  @tfield enums.WishMatchType include
--  @tfield enums.WishMatchType perfect
WishMatchType = {}

--- Wish hook point to use with Wish.add.
--  @see Wish.add
--  @enum WishHook
--  @tfield enums.WishHook first
--  @tfield enums.WishHook before_vanilla_special
--  @tfield enums.WishHook after_vanilla_special
--  @tfield enums.WishHook before_vanilla_item
--  @tfield enums.WishHook after_vanilla_item
--  @tfield enums.WishHook before_vanilla_skill
--  @tfield enums.WishHook after_vanilla_skill
--  @tfield enums.WishHook last
WishHook = {}
